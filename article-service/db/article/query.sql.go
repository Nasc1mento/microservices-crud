// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package article

import (
	"context"

	"github.com/google/uuid"
)

const createArticle = `-- name: CreateArticle :one
INSERT INTO articles (
    title,
    content,
    author_id
) VALUES (
    $1, $2, $3
) RETURNING id, author_id, title, content
`

type CreateArticleParams struct {
	Title    string
	Content  string
	AuthorID uuid.UUID
}

func (q *Queries) CreateArticle(ctx context.Context, arg CreateArticleParams) (Article, error) {
	row := q.db.QueryRow(ctx, createArticle, arg.Title, arg.Content, arg.AuthorID)
	var i Article
	err := row.Scan(
		&i.ID,
		&i.AuthorID,
		&i.Title,
		&i.Content,
	)
	return i, err
}

const deleteArticle = `-- name: DeleteArticle :exec
DELETE FROM articles
WHERE id = $1
`

func (q *Queries) DeleteArticle(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteArticle, id)
	return err
}

const getArticleById = `-- name: GetArticleById :one
SELECT id, author_id, title, content FROM articles 
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetArticleById(ctx context.Context, id uuid.UUID) (Article, error) {
	row := q.db.QueryRow(ctx, getArticleById, id)
	var i Article
	err := row.Scan(
		&i.ID,
		&i.AuthorID,
		&i.Title,
		&i.Content,
	)
	return i, err
}

const listArticles = `-- name: ListArticles :many
SELECT id, author_id, title, content FROM articles
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListArticlesParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListArticles(ctx context.Context, arg ListArticlesParams) ([]Article, error) {
	rows, err := q.db.Query(ctx, listArticles, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Article
	for rows.Next() {
		var i Article
		if err := rows.Scan(
			&i.ID,
			&i.AuthorID,
			&i.Title,
			&i.Content,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateArticle = `-- name: UpdateArticle :exec
UPDATE articles SET
    title = $1,
    content = $2
WHERE id = $3
RETURNING id, author_id, title, content
`

type UpdateArticleParams struct {
	Title   string
	Content string
	ID      uuid.UUID
}

func (q *Queries) UpdateArticle(ctx context.Context, arg UpdateArticleParams) error {
	_, err := q.db.Exec(ctx, updateArticle, arg.Title, arg.Content, arg.ID)
	return err
}
